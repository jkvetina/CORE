prompt --application/deployment/install/install_install_tables
begin
--   Manifest
--     INSTALL: INSTALL-INSTALL_TABLES
--   Manifest End
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2021.04.15'
,p_release=>'21.1.7'
,p_default_workspace_id=>9014660246496943
,p_default_application_id=>770
,p_default_id_offset=>0
,p_default_owner=>'CORE'
);
wwv_flow_api.create_install_script(
 p_id=>wwv_flow_api.id(20440056481310319)
,p_install_id=>wwv_flow_api.id(12958699824624058)
,p_name=>'INSTALL_TABLES'
,p_sequence=>10
,p_script_type=>'INSTALL'
,p_script_option=>'TABLE'
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'CREATE TABLE "APPS" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_APPS_APP_ID" NOT NULL ENABLE, ',
'	"APP_NAME" VARCHAR2(32), ',
'	"DESCRIPTION_" VARCHAR2(1000), ',
'	"MESSAGE" VARCHAR2(256), ',
'	"IS_ACTIVE" CHAR(1), ',
'	"IS_VISIBLE" CHAR(1), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "CH_APPS_IS_ACTIVE" CHECK (is_active = ''Y'' OR is_active IS NULL) ENABLE, ',
'	 CONSTRAINT "CH_APPS_IS_VISIBLE" CHECK (is_visible = ''Y'' OR is_visible IS NULL) ENABLE, ',
'	 CONSTRAINT "PK_APPS" PRIMARY KEY ("APP_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "ROLES" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_ROLES_APP_ID" NOT NULL ENABLE, ',
'	"ROLE_ID" VARCHAR2(30) CONSTRAINT "NN_ROLES_ROLE_ID" NOT NULL ENABLE, ',
'	"ROLE_NAME" VARCHAR2(64), ',
'	"ROLE_GROUP" VARCHAR2(64), ',
'	"DESCRIPTION_" VARCHAR2(1000), ',
'	"IS_ACTIVE" CHAR(1), ',
'	"ORDER#" NUMBER(4,0), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "CH_ROLES_IS_ACTIVE" CHECK (is_active = ''Y'' OR is_active IS NULL) ENABLE, ',
'	 CONSTRAINT "PK_ROLES" PRIMARY KEY ("APP_ID", "ROLE_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "USERS" ',
'   (	"USER_ID" VARCHAR2(30) CONSTRAINT "NN_USERS_USER_ID" NOT NULL ENABLE, ',
'	"USER_LOGIN" VARCHAR2(128) CONSTRAINT "NN_USERS_LOGIN" NOT NULL ENABLE, ',
'	"USER_NAME" VARCHAR2(64), ',
'	"LANG_ID" VARCHAR2(5), ',
'	"IS_ACTIVE" CHAR(1), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "CH_USERS_IS_ACTIVE" CHECK (is_active = ''Y'' OR is_active IS NULL) ENABLE, ',
'	 CONSTRAINT "PK_USERS" PRIMARY KEY ("USER_ID")',
'  USING INDEX  ENABLE, ',
'	 CONSTRAINT "UQ_USERS_USER_LOGIN" UNIQUE ("USER_LOGIN")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "USER_ROLES" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_USER_ROLES_APP_ID" NOT NULL ENABLE, ',
'	"USER_ID" VARCHAR2(30) CONSTRAINT "NN_USER_ROLES_USER_ID" NOT NULL ENABLE, ',
'	"ROLE_ID" VARCHAR2(30) CONSTRAINT "NN_USER_ROLES_ROLE_ID" NOT NULL ENABLE, ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "PK_USER_ROLES" PRIMARY KEY ("APP_ID", "USER_ID", "ROLE_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "EVENTS" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_EVENTS_APP_ID" NOT NULL ENABLE, ',
'	"EVENT_ID" VARCHAR2(30) CONSTRAINT "NN_EVENTS_EVENT_ID" NOT NULL ENABLE, ',
'	"EVENT_NAME" VARCHAR2(64), ',
'	"EVENT_GROUP" VARCHAR2(64), ',
'	"DESCRIPTION_" VARCHAR2(1000), ',
'	"IS_ACTIVE" CHAR(1), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "CH_EVENTS_IS_ACTIVE" CHECK (is_active = ''Y'' OR is_active IS NULL) ENABLE, ',
'	 CONSTRAINT "PK_EVENTS" PRIMARY KEY ("APP_ID", "EVENT_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "LOGS_BLACKLIST" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_LOGS_BLACKLIST_APP_ID" NOT NULL ENABLE, ',
'	"FLAG" CHAR(1), ',
'	"USER_ID" VARCHAR2(240), ',
'	"PAGE_ID" NUMBER(6,0), ',
'	"MODULE_LIKE" VARCHAR2(30), ',
'	"ACTION_LIKE" VARCHAR2(30), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "UQ_LOGS_BLACKLIST" UNIQUE ("APP_ID", "USER_ID", "PAGE_ID", "FLAG", "MODULE_LIKE", "ACTION_LIKE")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "NAVIGATION" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_NAVIGATION_APP_ID" NOT NULL ENABLE, ',
'	"PAGE_ID" NUMBER(6,0) CONSTRAINT "NN_NAVIGATION_PAGE_ID" NOT NULL ENABLE, ',
'	"PARENT_ID" NUMBER(6,0), ',
'	"ORDER#" NUMBER(4,0), ',
'	"IS_HIDDEN" CHAR(1), ',
'	"IS_RESET" CHAR(1), ',
'	"IS_SHARED" CHAR(1), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "CH_NAVIGATION_IS_HIDDEN" CHECK (is_hidden = ''Y'' OR is_hidden IS NULL) ENABLE, ',
'	 CONSTRAINT "CH_NAVIGATION_IS_RESET" CHECK (is_reset = ''Y'' OR is_reset IS NULL) ENABLE, ',
'	 CONSTRAINT "PK_NAVIGATION" PRIMARY KEY ("APP_ID", "PAGE_ID")',
'  USING INDEX  ENABLE, ',
'	 CONSTRAINT "CH_NAVIGATION_IS_SHARED" CHECK (is_shared = ''Y'' OR is_shared IS NULL) ENABLE',
'   ) ;',
'',
'CREATE TABLE "SESSIONS" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_SESSIONS_APP_ID" NOT NULL ENABLE, ',
'	"SESSION_ID" NUMBER CONSTRAINT "NN_SESSIONS_SESSION_ID" NOT NULL ENABLE, ',
'	"USER_ID" VARCHAR2(30) CONSTRAINT "NN_SESSIONS_USER_ID" NOT NULL ENABLE, ',
'	"CREATED_AT" DATE CONSTRAINT "NN_SESSIONS_CREATED_AT" NOT NULL ENABLE, ',
'	"UPDATED_AT" DATE CONSTRAINT "NN_SESSIONS_UPDATED_AT" NOT NULL ENABLE, ',
'	 CONSTRAINT "PK_SESSIONS" PRIMARY KEY ("APP_ID", "SESSION_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "SETTINGS" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_SETTINGS_APP_ID" NOT NULL ENABLE, ',
'	"SETTING_NAME" VARCHAR2(30) CONSTRAINT "NN_SETTINGS_ID" NOT NULL ENABLE, ',
'	"SETTING_VALUE" VARCHAR2(256), ',
'	"SETTING_CONTEXT" VARCHAR2(64), ',
'	"SETTING_GROUP" VARCHAR2(64), ',
'	"IS_NUMERIC" CHAR(1), ',
'	"IS_DATE" CHAR(1), ',
'	"DESCRIPTION_" VARCHAR2(1000), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "CH_SETTINGS_IS_ACTIVE" CHECK ((is_numeric = ''Y'' AND is_date IS NULL) OR is_numeric IS NULL) ENABLE, ',
'	 CONSTRAINT "CH_SETTINGS_IS_DATE" CHECK ((is_date = ''Y'' AND is_numeric IS NULL) OR is_date IS NULL) ENABLE, ',
'	 CONSTRAINT "UQ_SETTINGS" UNIQUE ("APP_ID", "SETTING_NAME", "SETTING_CONTEXT")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "SETTING_CONTEXTS" ',
'   (	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_SETTING_CONTEXTS_APP_ID" NOT NULL ENABLE, ',
'	"CONTEXT_ID" VARCHAR2(64) CONSTRAINT "NN_SETTING_CONTEXTS_NAME" NOT NULL ENABLE, ',
'	"CONTEXT_NAME" VARCHAR2(64), ',
'	"DESCRIPTION_" VARCHAR2(1000), ',
'	"ORDER#" NUMBER(4,0), ',
'	"UPDATED_BY" VARCHAR2(30), ',
'	"UPDATED_AT" DATE, ',
'	 CONSTRAINT "UQ_SETTING_CONTEXTS" UNIQUE ("APP_ID", "CONTEXT_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "LOG_EVENTS" ',
'   (	"LOG_ID" NUMBER(*,0) CONSTRAINT "NN_LOG_EVENTS_LOG_ID" NOT NULL ENABLE, ',
'	"LOG_PARENT" NUMBER(*,0), ',
'	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_LOG_EVENTS_APP_ID" NOT NULL ENABLE, ',
'	"PAGE_ID" NUMBER(6,0) CONSTRAINT "NN_LOG_EVENTS_PAGE_ID" NOT NULL ENABLE, ',
'	"USER_ID" VARCHAR2(30) CONSTRAINT "NN_LOG_EVENTS_USER_ID" NOT NULL ENABLE, ',
'	"SESSION_ID" NUMBER CONSTRAINT "NN_LOG_EVENTS_SESSION_ID" NOT NULL ENABLE, ',
'	"EVENT_ID" VARCHAR2(30) CONSTRAINT "NN_LOG_EVENTS_EVENT_ID" NOT NULL ENABLE, ',
'	"EVENT_VALUE" NUMBER, ',
'	"CREATED_AT" DATE CONSTRAINT "NN_LOG_EVENTS_CREATED_AT" NOT NULL ENABLE, ',
'	 CONSTRAINT "PK_LOG_EVENTS" PRIMARY KEY ("LOG_ID")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'CREATE TABLE "LOGS" ',
'   (	"LOG_ID" NUMBER(*,0) CONSTRAINT "NN_LOGS_LOG_ID" NOT NULL ENABLE, ',
'	"LOG_PARENT" NUMBER(*,0), ',
'	"APP_ID" NUMBER(4,0) CONSTRAINT "NN_LOGS_APP_ID" NOT NULL ENABLE, ',
'	"PAGE_ID" NUMBER(6,0), ',
'	"USER_ID" VARCHAR2(30), ',
'	"FLAG" CHAR(1) CONSTRAINT "NN_LOGS_FLAG" NOT NULL ENABLE, ',
'	"ACTION_NAME" VARCHAR2(32), ',
'	"MODULE_NAME" VARCHAR2(48), ',
'	"MODULE_LINE" NUMBER(8,0), ',
'	"MODULE_TIMER" VARCHAR2(12), ',
'	"ARGUMENTS" VARCHAR2(2000), ',
'	"PAYLOAD" VARCHAR2(4000), ',
'	"SESSION_ID" NUMBER, ',
'	"CREATED_AT" TIMESTAMP (6) CONSTRAINT "NN_LOGS_CREATED_AT" NOT NULL ENABLE, ',
'	 CONSTRAINT "PK_LOGS" PRIMARY KEY ("LOG_ID")',
'  USING INDEX  ENABLE',
'   ) ',
'  PARTITION BY RANGE ("CREATED_AT") INTERVAL (NUMTODSINTERVAL(1, ''DAY'')) ',
' (PARTITION "SYS_P1687"  VALUES LESS THAN (TIMESTAMP'' 2022-01-17 00:00:00'') ) ;',
'',
'CREATE TABLE "USER_SOURCE_VIEWS" ',
'   (	"NAME" VARCHAR2(30) CONSTRAINT "NN_USER_SOURCE_VIEWS_NAME" NOT NULL ENABLE, ',
'	"LINE" NUMBER(8,0) CONSTRAINT "NN_USER_SOURCE_VIEWS_LINE" NOT NULL ENABLE, ',
'	"TEXT" VARCHAR2(4000), ',
'	 CONSTRAINT "PK_USER_SOURCE_VIEWS" PRIMARY KEY ("NAME", "LINE")',
'  USING INDEX  ENABLE',
'   ) ;',
'',
'ALTER TABLE "ROLES" ADD CONSTRAINT "FK_ROLES_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "USER_ROLES" ADD CONSTRAINT "FK_USERS_ROLES_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "USER_ROLES" ADD CONSTRAINT "FK_USERS_ROLES_USER_ID" FOREIGN KEY ("USER_ID")',
'	  REFERENCES "USERS" ("USER_ID") DISABLE;',
'',
'ALTER TABLE "USER_ROLES" ADD CONSTRAINT "FK_USERS_ROLES_ROLE_ID" FOREIGN KEY ("APP_ID", "ROLE_ID")',
'	  REFERENCES "ROLES" ("APP_ID", "ROLE_ID") DEFERRABLE INITIALLY DEFERRED ENABLE;',
'',
'ALTER TABLE "EVENTS" ADD CONSTRAINT "FK_EVENTS_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "LOG_EVENTS" ADD CONSTRAINT "FK_LOG_EVENTS_EVENT_ID" FOREIGN KEY ("APP_ID", "EVENT_ID")',
'	  REFERENCES "EVENTS" ("APP_ID", "EVENT_ID") ENABLE;',
'',
'ALTER TABLE "LOG_EVENTS" ADD CONSTRAINT "FK_LOG_EVENTS_USERS" FOREIGN KEY ("USER_ID")',
'	  REFERENCES "USERS" ("USER_ID") DISABLE;',
'',
'ALTER TABLE "LOGS_BLACKLIST" ADD CONSTRAINT "FK_LOGS_BLACKLIST_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "LOGS_BLACKLIST" ADD CONSTRAINT "FK_LOGS_BLACKLIST_USER_ID" FOREIGN KEY ("USER_ID")',
'	  REFERENCES "USERS" ("USER_ID") ENABLE;',
'',
'ALTER TABLE "NAVIGATION" ADD CONSTRAINT "FK_NAVIGATION_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "NAVIGATION" ADD CONSTRAINT "FK_NAVIGATION_PARENT" FOREIGN KEY ("APP_ID", "PARENT_ID")',
'	  REFERENCES "NAVIGATION" ("APP_ID", "PAGE_ID") ENABLE;',
'',
'ALTER TABLE "SESSIONS" ADD CONSTRAINT "FK_SESSIONS_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "SESSIONS" ADD CONSTRAINT "FK_SESSIONS_USERS" FOREIGN KEY ("USER_ID")',
'	  REFERENCES "USERS" ("USER_ID") ENABLE;',
'',
'ALTER TABLE "SETTINGS" ADD CONSTRAINT "FK_SETTINGS_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'ALTER TABLE "SETTING_CONTEXTS" ADD CONSTRAINT "FK_SETTING_CONTEXTS_APP_ID" FOREIGN KEY ("APP_ID")',
'	  REFERENCES "APPS" ("APP_ID") ENABLE;',
'',
'CREATE INDEX "FK_LOGS_BLACKLIST_USER_ID" ON "LOGS_BLACKLIST" ("USER_ID") ',
'  ;',
'',
'CREATE INDEX "FK_NAVIGATION_PARENT" ON "NAVIGATION" ("APP_ID", "PARENT_ID") ',
'  ;',
'',
'CREATE INDEX "FK_SESSIONS_USERS" ON "SESSIONS" ("USER_ID") ',
'  ;',
'',
'CREATE INDEX "FK_USERS_ROLES_ROLE_ID" ON "USER_ROLES" ("APP_ID", "ROLE_ID") ',
'  ;',
'',
'CREATE INDEX "FK_USERS_ROLES_USER_ID" ON "USER_ROLES" ("USER_ID") ',
'  ;',
'',
'CREATE OR REPLACE TRIGGER "NAVIGATION__" ',
'FOR UPDATE OR INSERT OR DELETE ON navigation',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''NAVIGATION'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         navigation.updated_by%TYPE;',
'    curr_updated_at         navigation.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "NAVIGATION__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "APPS__" ',
'FOR UPDATE OR INSERT OR DELETE ON apps',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''APPS'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         apps.updated_by%TYPE;',
'    curr_updated_at         apps.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    deleted_app_id          apps.app_id%TYPE;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'',
'            -- update global message, create APEX session first',
'            /*',
'            BEGIN',
'                IF :NEW.app_id != app.get_app_id() THEN',
'                    app_actions.update_global_message (',
'                        in_message      => :NEW.message,',
'                        in_app_id       => :NEW.app_id',
'                    );',
'                END IF;',
'            EXCEPTION',
'            WHEN OTHERS THEN  -- ORA-20987: APEX - An API call has been prohibited.',
'                :NEW.message := :OLD.message;',
'            END;',
'            */',
'        ELSE',
'            DELETE FROM sessions t',
'            WHERE t.app_id = :OLD.app_id;',
'            --',
'            DELETE FROM navigation t',
'            WHERE t.app_id = :OLD.app_id;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'            --',
'            IF app.is_developer() THEN',
'                deleted_app_id := :OLD.app_id;',
'            END IF;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'        --',
'        IF rows_deleted > 0 AND deleted_app_id IS NOT NULL THEN',
'            DELETE FROM logs t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM logs_blacklist t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM log_events t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM events t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM user_roles t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM roles t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM setting_contexts t',
'            WHERE t.app_id = deleted_app_id;',
'            --',
'            DELETE FROM settings t',
'            WHERE t.app_id = deleted_app_id;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "APPS__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "SETTING_CONTEXTS__" ',
'FOR UPDATE OR INSERT OR DELETE ON setting_contexts',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''SETTING_CONTEXTS'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         setting_contexts.updated_by%TYPE;',
'    curr_updated_at         setting_contexts.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'        ELSE',
'            -- delete related rows',
'            DELETE FROM settings s',
'            WHERE s.app_id              = :OLD.app_id',
'                AND s.setting_context   = :OLD.context_id;',
'        END IF;',
'        --',
'        curr_event_id := app.log_event(''SETTING_CONTEXTS_CHANGED'');',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "SETTING_CONTEXTS__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "SETTINGS__" ',
'FOR UPDATE OR INSERT OR DELETE ON settings',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''SETTINGS'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         settings.updated_by%TYPE;',
'    curr_updated_at         settings.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'',
'            -- check name',
'            IF NOT REGEXP_LIKE(:NEW.setting_name, ''^[A-Z0-9_]{1,'' || TO_CHAR(30 - NVL(LENGTH(app_actions.settings_prefix), 0)) || ''}$'') THEN',
'                app.raise_error(''WRONG_NAME'', :NEW.setting_name);',
'            END IF;',
'',
'            -- check date value',
'            IF :NEW.is_date = ''Y'' THEN',
'                BEGIN',
'                    :NEW.setting_value := app.get_date(app.get_date(:NEW.setting_value));',
'                EXCEPTION',
'                WHEN OTHERS THEN',
'                    app.raise_error(''WRONG_DATE'');',
'                END;',
'            END IF;',
'',
'            -- check numeric value',
'            IF :NEW.is_numeric = ''Y'' THEN',
'                BEGIN',
'                    :NEW.setting_value := TO_NUMBER(REPLACE(:NEW.setting_value, '','', ''.''));',
'                EXCEPTION',
'                WHEN OTHERS THEN',
'                    app.raise_error(''WRONG_NUMBER'');',
'                END;',
'            END IF;',
'        END IF;',
'        --',
'        curr_event_id := app.log_event(''SETTINGS_CHANGED'');',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "SETTINGS__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "LOGS_BLACKLIST__" ',
'FOR UPDATE OR INSERT OR DELETE ON logs_blacklist',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''LOGS_BLACKLIST'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         logs_blacklist.updated_by%TYPE;',
'    curr_updated_at         logs_blacklist.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "LOGS_BLACKLIST__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "ROLES__" ',
'FOR UPDATE OR INSERT OR DELETE ON roles',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''ROLES'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         roles.updated_by%TYPE;',
'    curr_updated_at         roles.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'            --',
'            IF UPDATING AND :NEW.role_id != :OLD.role_id THEN',
'                UPDATE user_roles u',
'                SET u.role_id       = :NEW.role_id',
'                WHERE u.app_id      = :OLD.app_id',
'                    AND u.role_id   = :OLD.role_id;',
'                --',
'                curr_event_id := app.log_event(''ROLE_ID_CHANGED'');',
'            END IF;',
'        ELSE',
'            DELETE FROM user_roles u',
'            WHERE u.app_id      = :OLD.app_id',
'                AND u.role_id   = :OLD.role_id;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "ROLES__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "USER_ROLES__" ',
'FOR UPDATE OR INSERT OR DELETE ON user_roles',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''USER_ROLES'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         user_roles.updated_by%TYPE;',
'    curr_updated_at         user_roles.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIG'))
);
wwv_flow_api.component_end;
end;
/
begin
wwv_flow_api.component_begin (
 p_version_yyyy_mm_dd=>'2021.04.15'
,p_release=>'21.1.7'
,p_default_workspace_id=>9014660246496943
,p_default_application_id=>770
,p_default_id_offset=>0
,p_default_owner=>'CORE'
);
wwv_flow_api.append_to_install_script(
 p_id=>wwv_flow_api.id(20440056481310319)
,p_script_clob=>wwv_flow_string.join(wwv_flow_t_varchar2(
'GER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "USER_ROLES__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "EVENTS__" ',
'FOR UPDATE OR INSERT OR DELETE ON events',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''EVENTS'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_updated_by         events.updated_by%TYPE;',
'    curr_updated_at         events.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'            --',
'            IF UPDATING AND :NEW.event_id != :OLD.event_id THEN',
'                UPDATE log_events e',
'                SET e.event_id      = :NEW.event_id',
'                WHERE e.app_id      = :OLD.app_id',
'                    AND e.event_id  = :OLD.event_id;',
'            END IF;',
'        ELSE',
'            DELETE FROM log_events e',
'            WHERE e.app_id      = :OLD.app_id',
'                AND e.event_id  = :OLD.event_id;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "EVENTS__" ENABLE;',
'',
'CREATE OR REPLACE TRIGGER "USERS__" ',
'FOR UPDATE OR INSERT OR DELETE ON users',
'COMPOUND TRIGGER',
'',
'    in_table_name           CONSTANT user_tables.table_name%TYPE := ''USERS'';',
'    --',
'    curr_log_id             logs.log_id%TYPE;',
'    curr_event_id           log_events.log_id%TYPE;',
'    curr_updated_by         users.updated_by%TYPE;',
'    curr_updated_at         users.updated_at%TYPE;',
'    --',
'    rows_inserted           PLS_INTEGER := 0;',
'    rows_updated            PLS_INTEGER := 0;',
'    rows_deleted            PLS_INTEGER := 0;',
'    --',
'    last_rowid              ROWID;',
'',
'',
'',
'    BEFORE STATEMENT IS',
'    BEGIN',
'        curr_log_id         := app.log_trigger(in_table_name);',
'        curr_updated_by     := app.get_user_id();',
'        curr_updated_at     := SYSDATE;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE STATEMENT;',
'',
'',
'',
'    BEFORE EACH ROW IS',
'    BEGIN',
'        IF NOT DELETING THEN',
'            :NEW.updated_by := curr_updated_by;',
'            :NEW.updated_at := curr_updated_at;',
'            --',
'            IF UPDATING AND :NEW.user_id != :OLD.user_id THEN',
'                UPDATE user_roles r',
'                SET r.user_id       = :NEW.user_id',
'                WHERE r.user_id     = :OLD.user_id;',
'                --',
'                UPDATE sessions s',
'                SET s.user_id       = :NEW.user_id',
'                WHERE s.user_id     = :OLD.user_id;',
'                --',
'                UPDATE log_events l',
'                SET l.user_id       = :NEW.user_id',
'                WHERE l.user_id     = :OLD.user_id;',
'                --',
'                curr_event_id := app.log_event(''USER_ID_CHANGED'');',
'            END IF;',
'        ELSE',
'            DELETE FROM user_roles t',
'            WHERE t.user_id = :OLD.user_id;',
'            --',
'            DELETE FROM sessions t',
'            WHERE t.user_id = :OLD.user_id;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END BEFORE EACH ROW;',
'',
'',
'',
'    AFTER EACH ROW IS',
'        new_json    VARCHAR2(32767);',
'        old_json    VARCHAR2(32767);',
'    BEGIN',
'        IF INSERTING THEN',
'            rows_inserted       := rows_inserted + 1;',
'            last_rowid          := :NEW.ROWID;',
'        ELSIF UPDATING THEN',
'            rows_updated        := rows_updated + 1;',
'            last_rowid          := :OLD.ROWID;',
'        ELSIF DELETING THEN',
'            rows_deleted        := rows_deleted + 1;',
'            last_rowid          := :OLD.ROWID;',
'        END IF;',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER EACH ROW;',
'',
'',
'',
'    AFTER STATEMENT IS',
'    BEGIN',
'        app.log_success (',
'            in_log_id               => curr_log_id,',
'            in_rows_inserted        => rows_inserted,',
'            in_rows_updated         => rows_updated,',
'            in_rows_deleted         => rows_deleted,',
'            in_last_rowid           => last_rowid',
'        );',
'    EXCEPTION',
'    WHEN app.app_exception THEN',
'        RAISE;',
'    WHEN OTHERS THEN',
'        app.raise_error(''TRIGGER_FAILED'', in_table_name);',
'    END AFTER STATEMENT;',
'',
'END;',
'',
'/',
'',
'',
'ALTER TRIGGER "USERS__" ENABLE;',
'',
''))
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20440182950310344)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'APPS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20440331613310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'EVENTS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20440510982310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'LOGS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20440778556310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'LOGS_BLACKLIST'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20440985003310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'LOG_EVENTS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20441115334310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'NAVIGATION'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20441324995310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'ROLES'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20441557055310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'SESSIONS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20441708772310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'SETTINGS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20441991457310348)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'SETTING_CONTEXTS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20442141014310349)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'USERS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20442365413310349)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'USER_ROLES'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.create_install_object(
 p_id=>wwv_flow_api.id(20442559004310349)
,p_script_id=>wwv_flow_api.id(20440056481310319)
,p_object_owner=>'#OWNER#'
,p_object_type=>'TABLE'
,p_object_name=>'USER_SOURCE_VIEWS'
,p_last_updated_by=>'DEV'
,p_last_updated_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
,p_created_by=>'DEV'
,p_created_on=>to_date('20220123180044','YYYYMMDDHH24MISS')
);
wwv_flow_api.component_end;
end;
/
